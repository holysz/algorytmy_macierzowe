# Matrix multiplication: C = A @ B
# A: 2×2, B: 2×5, C: 2×5
# Using 18 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(5)])
	M0 = A[1][0] * (B[0][1] + -B[1][1])
	M1 = (A[1][0] + A[1][1]) * B[1][1]
	M2 = (A[0][1] + A[1][0]) * (B[0][4] + -B[1][1])
	M3 = (A[0][1] + -A[1][1]) * (B[1][1] + -B[1][4])
	M4 = (A[0][0] + -A[1][0]) * (B[0][1] + -B[0][4])
	M5 = A[0][1] * (B[0][4] + -B[1][4])
	M6 = (A[0][0] + A[0][1]) * B[0][4]
	M7 = A[1][0] * (B[0][0] + B[1][0])
	M8 = (A[1][0] + -A[1][1]) * B[1][0]
	M9 = (A[0][1] + A[1][0] + -A[1][1]) * (B[0][2] + -B[1][0])
	M10 = A[0][1] * (B[1][0] + -B[1][3])
	M11 = A[0][1] * (B[1][2] + B[1][3])
	M12 = (A[0][1] + -A[1][1]) * (B[0][2] + B[1][2])
	M13 = (A[0][0] + -A[0][1] + -A[1][0] + A[1][1]) * B[0][2]
	M14 = A[0][0] * (B[0][2] + B[0][3])
	M15 = (A[0][0] + -A[1][0]) * (B[0][2] + -B[0][3] + B[1][2] + -B[1][3])
	M16 = A[0][0] * (B[0][0] + -B[0][3])
	M17 = (A[0][0] + -A[0][1] + -A[1][0] + A[1][1]) * (B[0][2] + B[1][2] + -B[1][3])

# Assemble result matrix
	C[0][0] = -M8 + -M9 + -M13 + M14 + M16
	C[1][0] = M7 + -M8
	C[2][0] = M0 + -M2 + M4 + M6
	C[3][0] = M0 + M1
	C[4][0] = M8 + M9 + M10 + M11 + M13
	C[0][1] = M8 + M9 + M10 + M11 + -M12
	C[1][1] = -M8 + -M9 + -M10 + -M13 + M14
	C[2][1] = -M8 + -M9 + -M10 + -M12 + -M13 + M14 + M15 + -M17
	C[3][1] = -M5 + M6
	C[4][1] = M1 + M2 + M3 + -M5
	return (C, 18)