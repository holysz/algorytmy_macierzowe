# Matrix multiplication: C = A @ B
# A: 2×5, B: 5×5, C: 2×5
# Using 40 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(5)])
	M0 = A[1][0] * (B[0][1] + B[1][1])
	M1 = (A[0][1] + A[1][0] + -A[1][1]) * (B[0][0] + -B[0][1] + -B[1][1])
	M2 = (A[0][0] + -A[0][1] + -A[1][0] + A[1][1]) * (B[0][0] + -B[0][1] + -B[2][1] + -B[3][1] + B[4][1])
	M3 = (A[0][0] + -A[0][1] + -A[0][3] + -A[1][0] + A[1][1]) * (B[0][2] + B[3][1])
	M4 = (A[0][0] + -A[0][1] + A[0][4] + -A[1][0] + A[1][1]) * (B[0][4] + -B[4][1])
	M5 = (A[0][1] + -A[1][1] + -A[1][2]) * (B[0][3] + B[1][3] + B[2][0])
	M6 = A[0][0] * B[0][0]
	M7 = (A[1][0] + -A[1][1]) * (B[0][2] + B[0][3] + B[0][4] + B[1][1])
	M8 = (A[0][0] + -A[0][1] + A[0][4]) * B[0][4]
	M9 = (A[0][0] + -A[0][1] + A[0][4] + -A[1][0] + A[1][1] + -A[1][4]) * B[4][1]
	M10 = (A[0][0] + -A[0][1] + -A[0][2] + -A[1][0] + A[1][1] + A[1][2]) * B[2][1]
	M11 = (A[1][1] + A[1][2]) * (B[0][3] + B[1][3] + B[2][2] + -B[2][4])
	M12 = (A[0][1] + A[0][2] + A[0][3] + -A[1][1] + -A[1][2]) * (B[2][2] + B[3][3])
	M13 = (A[0][1] + A[0][2] + -A[0][4] + -A[1][1] + -A[1][2] + A[1][4]) * B[4][3]
	M14 = (A[0][1] + -A[1][1] + A[1][3]) * (B[0][2] + B[1][2] + -B[2][2] + -B[3][0] + -B[3][3])
	M15 = (A[1][1] + -A[1][3]) * (B[0][2] + B[1][2] + -B[2][2] + B[3][4])
	M16 = A[1][3] * (B[0][2] + B[1][2] + -B[2][2] + -B[3][1] + B[3][2] + B[3][3])
	M17 = (A[0][1] + -A[0][3] + -A[1][1] + A[1][3]) * (B[3][0] + B[3][3] + -B[4][2])
	M18 = (A[0][1] + -A[0][3] + A[0][4] + -A[1][1] + A[1][3]) * (B[3][4] + B[4][2])
	M19 = (A[0][1] + A[0][2] + A[0][3]) * B[2][2]
	M20 = (A[0][1] + -A[0][3] + A[0][4]) * B[3][4]
	M21 = (A[0][1] + A[0][2] + -A[0][4] + -A[1][1] + -A[1][2]) * (B[2][4] + B[4][3])
	M22 = (A[0][1] + -A[1][1] + -A[1][4]) * (B[0][4] + B[1][4] + -B[2][4] + B[3][4] + -B[4][0] + -B[4][2] + -B[4][3])
	M23 = (A[0][1] + A[0][2] + -A[0][4]) * B[2][4]
	M24 = (A[0][1] + -A[0][3] + A[0][4] + -A[1][1] + A[1][3] + -A[1][4]) * B[4][2]
	M25 = A[0][3] * (B[0][2] + -B[2][2] + B[3][0] + B[3][2] + B[3][3])
	M26 = A[0][4] * (B[0][4] + -B[2][4] + -B[3][4] + B[4][0] + B[4][2] + B[4][3] + -B[4][4])
	M27 = (A[0][1] + A[0][4] + -A[1][1] + -A[1][4]) * (B[4][0] + B[4][2] + B[4][3])
	M28 = (A[0][0] + -A[0][1] + -A[0][2] + -A[1][0] + A[1][1]) * (B[0][3] + B[2][1])
	M29 = A[0][1] * (B[0][2] + B[0][3] + -B[0][4] + B[1][0] + B[1][2] + B[1][3] + -B[1][4] + -B[2][2] + B[2][4] + -B[3][4])
	M30 = (A[0][1] + A[0][2] + -A[1][1] + -A[1][2]) * (B[2][0] + B[3][3] + -B[4][3])
	M31 = (A[0][0] + -A[0][1] + -A[0][2]) * B[0][3]
	M32 = (A[1][1] + A[1][4]) * (B[0][4] + B[1][4] + -B[2][4] + B[3][4])
	M33 = (A[0][1] + -A[1][1]) * (B[0][0] + -B[0][1] + B[1][0] + -B[1][1] + -B[2][0] + B[3][0] + B[3][3] + -B[4][0] + -B[4][2] + -B[4][3])
	M34 = A[1][2] * (B[0][3] + B[1][3] + B[2][1] + -B[2][3])
	M35 = (A[0][0] + -A[0][1] + -A[0][3] + -A[1][0] + A[1][1] + A[1][3]) * B[3][1]
	M36 = A[1][4] * (B[0][4] + B[1][4] + -B[2][4] + B[3][4] + B[4][1] + B[4][2] + B[4][3] + -B[4][4])
	M37 = (A[0][1] + A[0][2] + A[0][3] + -A[1][1] + -A[1][2] + -A[1][3]) * B[3][3]
	M38 = (A[0][0] + -A[0][1] + -A[0][3]) * B[0][2]
	M39 = A[0][2] * (B[0][3] + B[2][0] + B[2][3])

# Assemble result matrix
	C[0][0] = -M5 + M6 + -M11 + -M12 + -M14 + -M15 + -M17 + -M18 + M19 + M20 + M21 + M22 + -M23 + M27 + M29 + M30 + M32
	C[1][0] = M0 + M1 + -M5 + -M11 + -M12 + -M13 + -M14 + -M15 + -M18 + M19 + M20 + M21 + M22 + -M23 + M24 + M29 + M32 + -M33 + M37
	C[2][0] = -M1 + -M2 + -M3 + -M4 + M6 + -M7 + M8 + -M28 + M31 + M38
	C[3][0] = M0 + -M3 + -M4 + -M7 + M8 + -M9 + M10 + -M28 + M31 + M35 + M38
	C[4][0] = M14 + M15 + M17 + M18 + M19 + -M20 + M25 + M38
	C[0][1] = -M3 + -M12 + M15 + M16 + M18 + M19 + -M20 + -M24 + M35 + M37 + M38
	C[1][1] = M5 + M11 + M12 + -M19 + -M21 + M23 + -M30 + M31 + M39
	C[2][1] = M10 + M11 + M12 + M13 + -M19 + -M21 + M23 + -M28 + M31 + -M34 + -M37
	C[3][1] = M8 + -M20 + M22 + M23 + -M26 + M27 + M32
	C[4][1] = -M4 + M8 + -M9 + M13 + M18 + -M20 + -M21 + M23 + -M24 + M32 + -M36
	return (C, 40)