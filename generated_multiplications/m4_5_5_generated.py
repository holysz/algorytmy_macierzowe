# Matrix multiplication: C = A @ B
# A: 4×5, B: 5×5, C: 4×5
# Using 76 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(4)] for _ in range(5)])
	M0 = A[2][1] * (B[1][1] + B[1][3] + -B[3][1])
	M1 = (A[0][1] + -A[0][2] + -A[2][2]) * (-B[1][3] + B[2][1])
	M2 = (-A[2][4] + -A[3][1] + -A[3][4]) * (B[1][3] + B[4][1])
	M3 = (-A[0][4] + -A[3][1] + -A[3][4]) * (-B[1][0] + -B[4][1])
	M4 = (A[0][0] + -A[1][0] + A[1][1]) * (B[0][1] + -B[1][0])
	M5 = (-A[0][3] + -A[2][1] + -A[2][3]) * (-B[1][0] + -B[3][1])
	M6 = (-A[1][4] + -A[3][1] + -A[3][4]) * (B[1][4] + -B[4][1])
	M7 = (A[1][3] + -A[2][1] + -A[2][3]) * (B[1][4] + -B[3][1])
	M8 = (A[3][1] + A[3][4]) * -B[4][1]
	M9 = (-A[0][1] + A[0][2] + -A[1][2]) * (B[1][4] + B[2][1])
	M10 = (-A[1][0] + A[1][1] + A[2][0]) * (B[0][1] + -B[1][3])
	M11 = (A[1][0] + -A[1][1] + A[3][0]) * (-B[0][1] + -B[1][2])
	M12 = (-A[1][0] + A[1][1]) * B[0][1]
	M13 = (A[0][1] + -A[0][2]) * B[2][1]
	M14 = (A[2][1] + A[2][3]) * B[3][1]
	M15 = -A[3][2] * (-B[2][1] + B[2][2] + B[4][2])
	M16 = A[3][3] * (B[3][1] + -B[3][2] + -B[4][2])
	M17 = (-A[3][2] + -A[3][3] + A[3][4]) * B[4][2]
	M18 = (-A[1][3] + -A[2][2] + A[2][3]) * (-B[2][1] + -B[2][3] + B[2][4] + -B[3][3])
	M19 = -A[2][0] * (B[0][1] + B[0][3] + -B[3][3])
	M20 = (-A[2][0] + A[2][2] + -A[2][3]) * B[3][3]
	M21 = A[2][2] * (-B[2][1] + -B[2][3] + -B[3][3])
	M22 = (-A[0][0] + A[0][2] + A[3][2]) * (B[0][0] + B[0][1] + -B[0][2] + B[2][0])
	M23 = A[0][4] * (B[2][0] + B[4][0] + B[4][1])
	M24 = A[0][0] * (B[0][0] + B[0][1] + B[2][0])
	M25 = (-A[1][0] + A[1][4] + A[2][0]) * (B[0][4] + -B[4][1] + -B[4][3] + B[4][4])
	M26 = (-A[0][0] + A[0][2] + -A[0][4]) * B[2][0]
	M27 = A[1][4] * (B[0][4] + -B[4][1] + B[4][4])
	M28 = -A[1][3] * (B[0][4] + -B[3][1] + B[3][4])
	M29 = (-A[0][4] + A[3][3] + -A[3][4]) * (B[3][0] + B[3][1] + -B[3][2] + -B[4][2])
	M30 = (-A[1][0] + A[1][3] + A[1][4]) * -B[0][4]
	M31 = -A[2][4] * (B[4][1] + B[4][3])
	M32 = A[1][2] * (-B[2][1] + B[2][4])
	M33 = (-A[1][0] + A[1][3] + -A[3][0]) * (-B[0][4] + B[3][1] + -B[3][2] + -B[3][4] + -B[4][2])
	M34 = (A[1][0] + -A[1][3] + A[1][4] + A[3][0] + -A[3][2] + -A[3][3] + A[3][4]) * (-B[2][1] + B[2][2] + B[2][4] + B[4][2])
	M35 = (-A[0][0] + A[1][0] + -A[1][3] + -A[1][4]) * (B[0][4] + -B[3][0] + -B[3][1] + B[3][4])
	M36 = -A[0][3] * (-B[3][0] + -B[3][1])
	M37 = (A[0][2] + -A[0][4] + -A[1][2]) * (-B[2][0] + B[3][0] + B[3][1] + -B[3][4] + -B[4][0] + -B[4][1] + B[4][4])
	M38 = (-A[0][3] + -A[2][0] + -A[2][3]) * (-B[0][0] + -B[0][1] + -B[0][3] + B[3][3] + B[4][0] + B[4][1] + B[4][3])
	M39 = (A[0][0] + -A[0][2] + A[0][4] + -A[2][2]) * (-B[2][0] + -B[4][0] + -B[4][1] + -B[4][3])
	M40 = (A[2][0] + -A[2][2] + A[2][3] + A[3][3]) * (-B[0][1] + B[0][2] + -B[0][3] + B[3][3])
	M41 = (-A[2][4] + A[3][2] + -A[3][4]) * (-B[0][1] + B[0][2] + -B[0][3] + -B[2][1] + B[2][2] + -B[2][3] + B[4][2])
	M42 = A[1][1] * (B[0][1] + B[1][1] + -B[1][4])
	M43 = A[0][1] * (-B[1][0] + -B[1][1] + -B[2][1])
	M44 = (A[0][1] + -A[0][2] + -A[1][1] + A[1][2] + -A[1][3] + -A[1][4] + A[2][1] + A[2][3] + -A[3][1] + -A[3][4]) * B[1][4]
	M45 = A[3][1] * (B[1][1] + -B[1][2] + -B[4][1])
	M46 = (-A[0][0] + A[0][1] + A[0][3] + A[0][4] + A[1][0] + -A[1][1] + A[2][1] + A[2][3] + A[3][1] + A[3][4]) * -B[1][0]
	M47 = (A[1][3] + -A[2][3]) * (-B[1][4] + -B[2][1] + -B[2][3] + B[2][4] + -B[3][3] + B[3][4])
	M48 = (A[1][0] + -A[1][4] + -A[2][0] + A[2][4]) * (-B[4][1] + -B[4][3] + B[4][4])
	M49 = (-A[0][2] + A[0][4] + A[1][2] + -A[1][4]) * (B[3][0] + B[3][1] + -B[3][4] + -B[4][0] + -B[4][1] + B[4][4])
	M50 = (-A[1][0] + A[2][0]) * (B[0][3] + -B[0][4] + B[1][3] + B[4][1] + B[4][3] + -B[4][4])
	M51 = (A[0][0] + -A[0][2] + A[0][3] + A[0][4] + A[2][0] + -A[2][2] + A[2][3] + A[2][4]) * (B[4][0] + B[4][1] + B[4][3])
	M52 = (A[0][3] + A[2][3]) * (-B[0][0] + -B[0][1] + -B[0][3] + -B[1][0] + B[3][0] + B[3][3])
	M53 = (-A[1][2] + A[1][3] + A[2][2] + -A[2][3]) * (B[2][1] + B[2][3] + -B[2][4])
	M54 = (A[1][4] + A[3][4]) * (B[1][4] + B[2][1] + -B[2][2] + -B[2][4] + -B[4][2] + -B[4][4])
	M55 = (A[2][2] + -A[2][3] + -A[2][4] + A[3][2] + -A[3][3] + -A[3][4]) * (-B[0][1] + B[0][2] + -B[0][3] + -B[2][1] + B[2][2] + -B[2][3])
	M56 = (-A[0][2] + A[1][2]) * (-B[1][4] + B[2][0] + -B[2][4] + B[4][0] + B[4][1] + -B[4][4])
	M57 = (-A[1][0] + A[1][3] + -A[3][0] + A[3][3]) * (B[2][1] + -B[2][2] + -B[2][4] + -B[3][1] + B[3][2] + B[3][4])
	M58 = (A[0][2] + A[2][2]) * (B[0][0] + B[0][1] + B[0][3] + B[1][3] + B[2][0] + B[2][3])
	M59 = (A[0][0] + -A[0][2] + A[0][3] + A[2][0] + -A[2][2] + A[2][3]) * (B[0][0] + B[0][1] + B[0][3] + -B[4][0] + -B[4][1] + -B[4][3])
	M60 = (-A[0][4] + -A[3][4]) * (B[1][0] + -B[3][0] + -B[3][1] + B[3][2] + -B[4][0] + B[4][2])
	M61 = (-A[0][2] + -A[0][3] + A[0][4] + -A[3][2] + -A[3][3] + A[3][4]) * (B[3][0] + B[3][1] + -B[3][2])
	M62 = (-A[0][2] + -A[3][2]) * (-B[0][0] + -B[0][1] + B[0][2] + B[1][2] + -B[2][0] + B[2][2] + B[3][0] + B[3][1] + -B[3][2])
	M63 = (-A[0][0] + A[0][2] + -A[3][0] + A[3][2]) * (B[0][0] + B[0][1] + -B[0][2])
	M64 = (-A[2][0] + A[2][2] + -A[2][3] + -A[2][4] + -A[3][0] + A[3][2] + -A[3][3] + -A[3][4]) * (B[0][1] + -B[0][2] + B[0][3] + -B[1][3] + B[2][1] + -B[2][2] + B[2][3] + -B[4][2] + B[4][3])
	M65 = A[3][0] * (-B[0][1] + B[0][2])
	M66 = (-A[2][1] + -A[2][3] + -A[3][3]) * (-B[1][2] + B[3][1])
	M67 = (-A[0][1] + A[0][2] + A[1][0] + -A[1][1] + -A[2][1] + -A[2][3] + A[3][0] + -A[3][1] + A[3][2] + -A[3][3]) * -B[1][2]
	M68 = (-A[0][0] + A[1][0]) * (-B[0][0] + B[0][4] + -B[1][0] + -B[3][0] + -B[3][1] + B[3][4])
	M69 = (A[1][0] + A[3][0]) * (-B[0][2] + -B[0][4] + -B[1][2] + -B[2][1] + B[2][2] + B[2][4] + B[3][1] + -B[3][2] + -B[3][4])
	M70 = (-A[0][1] + A[0][2] + -A[1][0] + A[1][1] + A[2][0] + -A[2][1] + A[2][2] + -A[2][4] + -A[3][1] + -A[3][4]) * -B[1][3]
	M71 = (-A[0][1] + A[0][2] + A[3][2]) * (B[1][2] + B[2][1])
	M72 = (-A[1][2] + -A[1][3] + A[1][4] + -A[3][2] + -A[3][3] + A[3][4]) * (B[2][1] + -B[2][2] + -B[2][4])
	M73 = (-A[2][3] + -A[3][3]) * (-B[1][2] + -B[2][1] + B[2][2] + -B[2][3] + B[3][2] + -B[3][3])
	M74 = (-A[2][0] + A[2][2] + -A[2][3] + -A[3][0] + A[3][2] + -A[3][3]) * (-B[1][3] + B[2][1] + -B[2][2] + B[2][3] + -B[4][2] + B[4][3])
	M75 = (-A[0][0] + -A[0][2] + A[0][3] + A[0][4] + A[1][0] + A[1][2] + -A[1][3] + -A[1][4]) * (B[3][0] + B[3][1] + -B[3][4])

# Assemble result matrix
	C[0][0] = -M3 + -M4 + -M5 + -M8 + M12 + M14 + M23 + M24 + M26 + M36 + -M46
	C[1][0] = -M4 + M12 + M24 + M26 + M27 + -M28 + M35 + M37 + M49 + -M68
	C[2][0] = M5 + -M14 + M19 + -M26 + M31 + -M36 + M38 + M39 + M51 + M52
	C[3][0] = M3 + M8 + -M16 + M22 + -M23 + -M26 + M29 + M60 + -M63 + M65
	C[4][0] = M3 + M4 + M5 + M8 + -M12 + -M13 + -M14 + -M43 + M46
	C[0][1] = M6 + -M7 + M8 + -M9 + -M12 + -M13 + M14 + M42 + -M44
	C[1][1] = M0 + -M1 + -M2 + M8 + M10 + -M12 + M13 + M14 + -M70
	C[2][1] = -M8 + -M11 + M12 + M13 + -M14 + M45 + -M66 + M67 + M71
	C[3][1] = -M13 + M15 + -M17 + M22 + M24 + M29 + M36 + M61 + -M62 + -M71
	C[4][1] = M11 + -M12 + -M17 + M28 + -M32 + -M33 + M34 + -M65 + -M69 + M72
	C[0][2] = M14 + M16 + -M17 + -M19 + -M21 + M40 + -M41 + M55 + M66 + -M73
	C[1][2] = -M11 + M12 + M13 + -M14 + -M15 + -M16 + M17 + M65 + -M66 + M67 + M71
	C[2][2] = -M1 + M13 + M20 + M21 + -M23 + -M24 + -M38 + -M39 + M58 + M59
	C[3][2] = -M10 + M12 + M18 + -M19 + -M20 + -M25 + M27 + M32 + -M50 + -M53
	C[4][2] = M1 + M2 + -M8 + -M10 + M12 + -M13 + -M19 + -M20 + -M21 + -M31 + M70
	C[0][3] = -M2 + M8 + -M15 + M20 + M31 + M40 + -M41 + -M64 + M65 + M74
	C[1][3] = -M9 + -M13 + M23 + M30 + M32 + -M35 + M36 + -M37 + M56 + -M75
	C[2][3] = M6 + -M7 + M8 + -M9 + -M13 + M14 + M27 + -M28 + M30 + M32 + -M44
	C[3][3] = -M7 + M14 + -M18 + -M21 + M25 + -M28 + M30 + -M31 + -M47 + M48
	C[4][3] = -M6 + -M8 + M15 + M16 + -M27 + -M30 + M33 + -M34 + -M54 + M57
	return (C, 76)