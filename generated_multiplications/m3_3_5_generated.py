# Matrix multiplication: C = A @ B
# A: 3×3, B: 3×5, C: 3×5
# Using 36 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(3)] for _ in range(5)])
	M0 = A[2][2] * B[2][0]
	M1 = (A[0][2] + A[1][2]) * (B[0][4] + -B[1][4] + -B[2][4])
	M2 = (A[0][2] + -A[1][1] + A[1][2]) * (B[0][4] + -B[1][4] + -B[2][0] + -B[2][4])
	M3 = (A[0][0] + A[0][2] + -A[1][1] + A[1][2]) * (B[0][4] + B[1][3])
	M4 = (A[1][0] + A[1][1] + -A[2][0]) * (B[0][4] + -B[1][0] + -B[1][4] + -B[2][0] + -B[2][4])
	M5 = (A[1][0] + -A[2][0]) * (B[0][0] + B[0][4] + -B[1][0] + -B[1][4] + -B[2][0] + -B[2][4])
	M6 = (A[1][1] + -A[1][2]) * (B[2][0] + B[2][4])
	M7 = (A[1][0] + A[1][1] + -A[2][0] + -A[2][2]) * (B[1][1] + B[1][2] + -B[2][0] + -B[2][4])
	M8 = A[0][2] * B[2][0]
	M9 = (A[1][0] + A[1][1] + -A[2][0] + -A[2][1]) * (B[1][0] + B[1][1] + B[1][2] + B[1][4])
	M10 = (A[0][1] + -A[0][2] + A[1][1] + -A[1][2]) * (B[1][3] + B[1][4])
	M11 = (A[0][0] + A[0][1]) * B[1][3]
	M12 = (A[1][0] + A[1][1]) * B[0][4]
	M13 = (A[0][0] + A[0][2] + A[1][0] + A[1][2]) * (B[0][2] + B[0][3] + B[0][4])
	M14 = (A[0][0] + A[0][1] + A[2][1]) * (B[0][0] + B[0][3] + -B[1][3] + -B[2][3])
	M15 = A[0][0] * (B[0][3] + -B[1][3] + -B[2][3])
	M16 = (A[0][0] + A[0][1] + A[2][1] + -A[2][2]) * (B[0][1] + B[2][3])
	M17 = A[2][1] * B[1][0]
	M18 = A[2][0] * B[0][0]
	M19 = (A[2][1] + -A[2][2]) * (B[1][1] + B[1][2])
	M20 = (A[1][0] + -A[2][0] + -A[2][2]) * (B[0][1] + -B[1][1] + -B[1][2] + -B[2][1] + -B[2][2])
	M21 = (A[0][0] + A[0][2] + A[1][2]) * (B[0][2] + B[0][3] + -B[1][3] + -B[2][3])
	M22 = (A[0][1] + A[2][1] + -A[2][2]) * (B[0][1] + -B[1][1] + -B[1][2] + -B[2][1])
	M23 = (A[0][1] + A[2][1]) * (2*B[0][0] + -B[0][1] + 2*B[0][3] + -2*B[1][0] + B[1][1] + -2*B[1][3] + B[2][1] + -2*B[2][3])
	M24 = (A[1][0] + -A[2][0]) * (B[0][1] + B[0][2] + -B[1][1] + -B[1][2] + -B[2][1] + -B[2][2])
	M25 = (A[0][0] + A[0][1] + A[2][0] + A[2][1]) * (B[0][0] + B[0][1] + B[0][3])
	M26 = (A[2][0] + A[2][2]) * B[0][1]
	M27 = (A[1][0] + A[1][2] + -A[2][0] + -A[2][2]) * (B[2][0] + B[2][1] + B[2][2] + B[2][4])
	M28 = A[1][0] * B[0][2]
	M29 = (A[0][1] + A[2][1]) * (B[0][0] + B[0][3] + -B[1][0] + -B[1][3] + -B[2][3])
	M30 = (A[0][2] + A[1][2]) * (B[0][2] + B[0][3] + -B[1][3] + -B[2][2] + -B[2][3])
	M31 = A[1][2] * B[2][2]
	M32 = (A[0][1] + -A[0][2] + A[2][1] + -A[2][2]) * (B[2][1] + B[2][3])
	M33 = (A[0][0] + A[0][2]) * B[2][3]
	M34 = A[0][1] * B[1][2]
	M35 = A[1][1] * B[1][2]

# Assemble result matrix
	C[0][0] = M8 + M14 + -M15 + -M17 + -M29
	C[1][0] = M1 + -M2 + -M4 + M5 + -M8 + M18
	C[2][0] = M0 + M17 + M18
	C[3][0] = M16 + -M19 + -M22 + -M32 + -M33 + -M34
	C[4][0] = M6 + M7 + M20 + M26 + M27 + -M31 + -M35
	C[0][1] = M19 + M22 + M23 + M26 + -2*M29 + M34
	C[1][1] = -M15 + M21 + -M30 + -M31 + M34
	C[2][1] = M28 + M31 + M35
	C[3][1] = M20 + -M22 + -M23 + -M24 + M28 + 2*M29 + -M34
	C[4][1] = M11 + M15 + M33
	C[0][2] = -M3 + -M12 + M13 + -M21 + -M28 + -M33
	C[1][2] = -M11 + -M14 + -M16 + -M18 + M25 + -M26
	C[2][2] = -M2 + M3 + M6 + -M8 + M10 + -M11
	C[3][2] = -M1 + M2 + -M6 + M8 + M12
	C[4][2] = -M0 + -M4 + M7 + -M9 + M12 + -M17 + -M19
	return (C, 36)