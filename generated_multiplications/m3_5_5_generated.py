# Matrix multiplication: C = A @ B
# A: 3×5, B: 5×5, C: 3×5
# Using 58 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(3)] for _ in range(5)])
	M0 = A[2][2] * (-B[0][4] + -B[2][0] + B[2][2] + -B[2][4])
	M1 = A[2][3] * (B[0][4] + -B[3][0] + B[3][2] + -B[3][4])
	M2 = (-A[1][0] + A[2][2]) * (B[0][4] + -B[2][3])
	M3 = (-A[0][0] + -A[2][3]) * (B[0][4] + B[3][1])
	M4 = -A[0][0] * (-B[0][0] + B[0][1] + -B[0][2] + -B[3][1])
	M5 = (-A[0][0] + -A[0][3] + A[1][3]) * (-B[0][0] + B[0][1] + -B[0][2] + B[0][3] + -B[3][1])
	M6 = (A[0][1] + A[0][3] + -A[2][3]) * (B[1][4] + B[3][0])
	M7 = (A[1][2] + -A[1][4] + -A[2][2]) * (-B[2][2] + -B[4][4])
	M8 = (-A[2][0] + A[2][2] + -A[2][3]) * B[0][4]
	M9 = (A[0][3] + -A[0][4] + -A[2][3]) * (-B[3][2] + -B[4][4])
	M10 = -A[1][0] * (-B[0][0] + -B[0][2] + B[0][3] + B[2][3])
	M11 = (-A[1][1] + -A[1][2] + A[2][2]) * (B[1][4] + B[2][0])
	M12 = (A[0][1] + A[0][3] + A[1][1] + A[1][2] + -A[2][1] + -A[2][2] + -A[2][3]) * B[1][4]
	M13 = (-A[0][3] + A[0][4] + -A[1][2] + A[1][4] + A[2][2] + A[2][3] + -A[2][4]) * -B[4][4]
	M14 = (A[1][2] + -A[1][3] + -A[2][2]) * (B[1][4] + -B[2][3] + -B[2][4] + -B[4][4])
	M15 = (-A[1][0] + A[2][0] + A[2][1]) * (-B[0][0] + B[1][3])
	M16 = (-A[2][0] + -A[2][1]) * -B[0][0]
	M17 = (A[1][0] + -A[2][0] + -A[2][4]) * (B[0][2] + -B[4][3])
	M18 = (-A[2][0] + -A[2][4]) * B[0][2]
	M19 = -A[1][3] * (B[1][4] + -B[2][3] + -B[2][4] + B[3][0] + B[3][2] + -B[3][3] + -B[3][4] + -B[4][4])
	M20 = (A[0][3] + -A[0][4] + -A[1][3]) * (-B[3][2] + -B[4][3])
	M21 = (A[0][1] + A[0][3] + -A[1][3]) * (-B[1][3] + B[3][0])
	M22 = (A[0][3] + -A[0][4] + A[1][0] + -A[1][3] + A[1][4] + -A[2][0] + -A[2][4]) * -B[4][3]
	M23 = (A[0][2] + -A[1][3]) * (B[1][4] + -B[2][3] + -B[2][4] + -B[3][4] + -B[4][4])
	M24 = (A[0][3] + -A[1][3]) * (-B[0][0] + B[0][1] + -B[0][2] + B[0][3] + B[1][3] + -B[3][1] + -B[3][3] + -B[4][3])
	M25 = (A[0][1] + A[0][3] + -A[1][0] + -A[1][1] + -A[1][3] + A[2][0] + A[2][1]) * -B[1][3]
	M26 = (A[0][3] + -A[0][4]) * -B[3][2]
	M27 = (A[0][2] + A[1][0] + -A[1][2]) * B[2][3]
	M28 = (-A[0][0] + A[0][2] + -A[0][3]) * -B[3][1]
	M29 = (A[0][1] + A[0][3]) * B[3][0]
	M30 = (-A[1][1] + -A[1][2]) * -B[2][0]
	M31 = A[2][2] * (-B[2][0] + -B[2][1] + B[2][2] + -B[2][4])
	M32 = A[2][3] * (B[0][3] + B[0][4] + -B[1][3] + B[3][0] + -B[3][2] + B[3][3] + B[3][4] + -B[4][3])
	M33 = A[0][2] * (B[2][0] + -B[2][1] + B[2][2] + -B[3][1])
	M34 = (A[0][2] + -A[1][2] + A[1][4]) * (B[2][2] + -B[4][0] + B[4][1])
	M35 = (A[0][2] + -A[1][1] + -A[1][2]) * (-B[1][1] + B[1][2] + B[2][0])
	M36 = (A[0][2] + -A[1][2]) * (-B[0][0] + B[0][1] + -B[0][2] + B[0][3] + -B[1][1] + B[1][2] + B[2][1] + B[2][3] + -B[4][0] + B[4][1])
	M37 = A[0][1] * (-B[1][0] + B[1][1] + -B[1][2] + B[3][0])
	M38 = (A[1][2] + -A[1][4]) * B[2][2]
	M39 = (-A[0][0] + A[2][0] + A[2][4]) * (B[0][2] + -B[1][2] + B[4][0] + -B[4][1])
	M40 = (-A[0][0] + A[0][2] + -A[0][4] + -A[1][2] + A[1][4] + A[2][0] + A[2][4]) * (B[1][2] + -B[4][0] + B[4][1])
	M41 = (-A[0][0] + A[2][0] + A[2][1]) * (-B[0][0] + B[1][1] + -B[1][2] + B[4][0])
	M42 = (A[0][1] + A[0][2] + -A[0][4] + -A[1][1] + -A[1][2] + A[1][4]) * (B[1][2] + -B[4][0])
	M43 = (A[0][1] + A[0][2] + -A[0][4] + -A[1][2] + A[1][4]) * B[1][2]
	M44 = (A[0][2] + -A[0][3] + A[2][3]) * (B[1][4] + -B[3][1] + -B[3][4] + -B[4][4])
	M45 = A[0][2] * (B[1][4] + -B[2][4] + -B[3][4] + -B[4][4])
	M46 = (A[0][1] + A[0][2] + -A[0][4] + -A[1][1] + -A[1][2]) * -B[4][0]
	M47 = -A[2][4] * (-B[0][2] + B[1][2] + B[4][2] + -B[4][4])
	M48 = (A[2][1] + -A[2][4]) * B[1][2]
	M49 = A[1][4] * (B[2][2] + -B[4][0] + B[4][2] + -B[4][3])
	M50 = (-A[0][0] + -A[0][1] + -A[0][2] + A[1][1] + A[1][2] + A[2][0] + A[2][1]) * (-B[1][1] + B[1][2] + -B[4][0])
	M51 = A[0][4] * (-B[3][2] + -B[4][0] + B[4][1] + -B[4][2])
	M52 = (-A[0][0] + A[0][2] + -A[0][3] + A[1][0] + -A[1][2] + A[1][3]) * (-B[0][0] + B[0][1] + -B[0][2] + B[0][3])
	M53 = -A[2][1] * (-B[0][0] + B[1][0] + B[1][4] + B[4][0])
	M54 = -A[1][1] * (-B[1][0] + B[1][2] + B[1][3] + B[2][0])
	M55 = (-A[1][0] + A[2][0] + -A[2][3]) * (B[0][3] + B[0][4] + -B[1][3] + -B[4][3])
	M56 = (-A[0][0] + A[2][0]) * (B[0][1] + B[0][4] + -B[1][1] + -B[4][1])
	M57 = (A[2][1] + -A[2][4]) * (B[1][2] + -B[4][0])

# Assemble result matrix
	C[0][0] = M16 + M29 + M30 + M35 + -M37 + M41 + M46 + M50
	C[1][0] = M15 + M16 + -M21 + M25 + M29 + M30 + -M42 + M43 + M46 + M54
	C[2][0] = -M6 + M11 + M12 + M16 + M29 + M30 + -M48 + -M53 + M57
	C[3][0] = -M4 + M16 + -M18 + M28 + M30 + -M33 + M34 + M35 + M38 + -M39 + -M40 + M41 + M43 + M46 + M50
	C[4][0] = -M5 + M10 + M27 + M28 + M30 + -M33 + M34 + M35 + -M36 + M38 + -M42 + M43 + M46 + M52
	C[0][1] = M0 + -M3 + -M4 + M8 + M16 + -M18 + -M31 + -M39 + M41 + M56 + M57
	C[1][1] = -M18 + -M26 + M34 + M38 + -M39 + -M40 + M43 + -M51
	C[2][1] = M17 + -M18 + M20 + -M22 + -M26 + M38 + -M42 + M43 + M46 + M49
	C[3][1] = M7 + M9 + M13 + -M18 + -M26 + M38 + -M47 + M48
	C[4][1] = M4 + -M5 + M19 + M20 + -M21 + -M23 + -M24 + -M26 + M29 + M45
	C[0][2] = -M10 + M15 + M16 + M17 + -M18 + M19 + M20 + -M21 + -M22 + -M23 + M25 + -M26 + -M27 + M29 + M45
	C[1][2] = M1 + -M2 + M8 + -M10 + M15 + M16 + M17 + -M18 + M32 + M55
	C[2][2] = -M1 + -M3 + M6 + M9 + -M26 + -M28 + -M29 + M44 + -M45
	C[3][2] = -M0 + -M2 + M7 + -M11 + -M14 + M23 + M27 + -M30 + M38 + -M45
	C[4][2] = -M0 + -M1 + M6 + M7 + -M8 + M9 + -M11 + -M12 + M13 + -M26 + -M29 + -M30 + M38
	return (C, 58)