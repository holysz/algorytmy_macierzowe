# Matrix multiplication: C = A @ B
# A: 2×3, B: 3×4, C: 2×4
# Using 20 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(4)])
	M0 = A[0][1] * (B[0][1] + -B[1][1] + -B[2][1])
	M1 = (A[0][1] + -A[0][2]) * (B[0][1] + -B[2][1])
	M2 = (A[0][1] + -A[0][2] + A[1][2]) * (B[0][1] + -B[1][1] + -B[1][3] + -B[2][1])
	M3 = (A[0][1] + -A[0][2] + -A[1][1] + A[1][2]) * (B[0][1] + -B[1][1] + -B[1][3] + B[2][0])
	M4 = A[1][1] * B[1][3]
	M5 = (A[0][1] + -A[0][2] + -A[1][0] + -A[1][1]) * (B[0][1] + B[2][0])
	M6 = (A[0][2] + -A[1][2]) * (B[0][1] + -B[1][1] + -B[1][3] + -B[2][1] + -B[2][2] + -B[2][3])
	M7 = (A[0][0] + A[1][2]) * (B[0][3] + B[2][2])
	M8 = (A[0][0] + A[0][2]) * (B[0][1] + -B[2][2])
	M9 = (A[1][0] + A[1][1]) * (B[0][0] + -B[2][0])
	M10 = (A[1][0] + A[1][2]) * (B[0][3] + B[2][0])
	M11 = A[1][2] * (B[0][3] + -B[2][3])
	M12 = (A[0][0] + -A[1][0] + -A[1][1]) * (B[0][0] + -B[1][0] + -B[1][2] + -B[2][0])
	M13 = (A[0][0] + A[0][1] + -A[1][0] + -A[1][1]) * (B[0][1] + B[1][0] + B[1][2] + B[2][0])
	M14 = A[0][1] * B[1][2]
	M15 = A[1][1] * (B[0][0] + -B[1][0] + -B[2][0])
	M16 = A[0][0] * (B[0][2] + -B[2][2])
	M17 = (A[0][0] + A[0][2]) * B[0][1]
	M18 = (A[1][0] + A[1][2]) * B[2][0]
	M19 = (A[0][0] + -A[1][0]) * (B[0][0] + B[0][2] + B[0][3] + -B[1][0] + -B[1][2] + -B[2][0])

# Assemble result matrix
	C[0][0] = -M5 + M9 + M12 + M13 + -M14 + -M17
	C[1][0] = M9 + -M15 + M18
	C[2][0] = -M0 + M1 + M17
	C[3][0] = M1 + -M2 + M3 + -M4 + -M5 + -M18
	C[0][1] = -M8 + M14 + M16 + M17
	C[1][1] = M7 + -M10 + M12 + M15 + M16 + M18 + -M19
	C[2][1] = M0 + -M2 + -M6 + M7 + M8 + -M11 + -M17
	C[3][1] = M4 + M10 + -M11 + -M18
	return (C, 20)