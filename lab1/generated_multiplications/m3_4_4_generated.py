# Matrix multiplication: C = A @ B
# A: 3×4, B: 4×4, C: 3×4
# Using 38 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(3)] for _ in range(4)])
	M0 = A[0][1] * (B[1][0] + B[1][3] + -B[2][0])
	M1 = (A[0][1] + A[1][2]) * (-B[1][2] + -B[2][0])
	M2 = (A[1][1] + A[1][2] + -A[2][1]) * (-B[1][2] + B[2][1] + B[2][2] + B[2][3])
	M3 = (A[0][1] + -A[1][1] + A[1][3]) * (-B[1][3] + B[3][0])
	M4 = -A[0][0] * (-B[0][0] + -B[0][3] + B[2][0])
	M5 = (-A[0][0] + -A[2][2]) * (B[0][1] + B[2][0])
	M6 = (-A[0][0] + A[2][0] + A[2][3]) * (-B[0][3] + -B[3][0])
	M7 = -A[2][2] * (B[0][1] + -B[2][1] + -B[2][3])
	M8 = -A[1][2] * (-B[1][2] + B[2][2] + B[2][3])
	M9 = -A[2][1] * (-B[0][0] + -B[0][1] + B[1][0] + B[1][1] + B[1][3] + B[3][0])
	M10 = A[2][3] * (-B[0][3] + B[3][1] + B[3][3])
	M11 = (-A[2][0] + -A[2][3]) * -B[0][3]
	M12 = (A[1][1] + -A[1][3] + -A[2][1]) * (-B[1][3] + B[3][1])
	M13 = -A[0][3] * (B[2][3] + B[3][0] + B[3][3])
	M14 = (-A[0][0] + A[2][0] + A[2][1]) * (-B[0][0] + -B[0][1] + B[3][0])
	M15 = (A[1][0] + -A[2][0] + -A[2][3]) * (-B[0][3] + -B[3][2])
	M16 = (A[1][0] + -A[2][0]) * (B[0][1] + B[0][2] + -B[3][2])
	M17 = (-A[0][2] + A[0][3] + A[2][2]) * (B[2][3] + -B[3][1])
	M18 = (-A[0][0] + -A[0][1] + -A[0][2]) * -B[2][0]
	M19 = (-A[0][2] + A[0][3] + A[1][2]) * (B[2][3] + -B[3][2])
	M20 = (-A[0][2] + A[2][2]) * (B[1][0] + B[1][1] + B[1][3] + -B[2][0] + -B[2][1] + -B[3][1])
	M21 = (-2*A[0][0] + -A[0][2] + A[1][2]) * (-B[2][0] + -B[2][2] + -B[3][2])
	M22 = (A[0][1] + A[0][2] + -A[2][2]) * (B[1][0] + B[1][1] + B[1][3])
	M23 = (-A[0][0] + A[0][1] + -A[0][3] + -A[1][1] + A[1][3] + A[2][0] + A[2][3]) * B[3][0]
	M24 = (A[1][0] + A[2][1]) * (-B[0][0] + -B[0][1] + B[1][0] + B[3][0])
	M25 = (A[0][1] + -A[1][0] + -A[1][1]) * (B[1][0] + B[1][2] + B[3][0])
	M26 = A[1][0] * (-B[0][0] + B[1][0] + B[3][0])
	M27 = (-A[0][2] + A[0][3] + -A[1][1] + A[1][3] + A[2][1] + A[2][2] + -A[2][3]) * -B[3][1]
	M28 = (A[1][0] + -A[2][0] + -A[2][2]) * B[0][1]
	M29 = (-A[0][2] + A[0][3]) * B[2][3]
	M30 = -A[0][0] * (-B[0][0] + B[0][2] + -B[0][3] + -2*B[2][2] + -2*B[3][2])
	M31 = -A[1][3] * (-B[1][3] + -B[3][2] + -B[3][3])
	M32 = (A[1][1] + -A[1][3]) * -B[1][3]
	M33 = (A[1][0] + A[1][1] + A[1][2]) * -B[1][2]
	M34 = (A[1][1] + A[1][2] + -A[2][1] + -A[2][2]) * (-B[2][1] + -B[2][2] + -B[2][3])
	M35 = A[1][0] * (-B[0][2] + -B[0][3] + B[1][2])
	M36 = (-A[0][2] + A[0][3] + -A[1][0] + A[1][2] + -A[1][3] + A[2][0] + A[2][3]) * B[3][2]
	M37 = (A[1][1] + -A[2][1]) * (B[1][1] + B[1][2] + -B[2][1] + -B[2][2] + -B[2][3] + B[3][1])

# Assemble result matrix
	C[0][0] = M0 + M3 + M4 + -M6 + -M11 + M18 + -M23 + M32
	C[1][0] = M0 + -M1 + M3 + -M25 + -M26 + M32 + M33
	C[2][0] = M4 + -M5 + -M6 + -M11 + -M14 + M24 + -M26 + M28
	C[3][0] = -M0 + -M5 + M7 + -M17 + -M18 + M20 + M22 + M29
	C[0][1] = M2 + M8 + -M9 + -M12 + -M24 + M26 + M32 + M37
	C[1][1] = M7 + -M9 + -M12 + -M17 + -M24 + M26 + M27 + -M28 + M29 + M32
	C[2][1] = -M1 + M4 + -M8 + -M18 + -M19 + M21 + M29 + -M30
	C[3][1] = -M8 + -M11 + M15 + -M19 + M29 + -M33 + -M35 + -M36
	C[0][2] = M2 + -M7 + -M11 + M15 + -M16 + M28 + -M33 + M34 + -M35
	C[1][2] = -M3 + M6 + M11 + -M13 + M23 + -M29 + -M32
	C[2][2] = M11 + -M15 + M19 + -M29 + M31 + -M32 + M36
	C[3][2] = M10 + M11 + M12 + M17 + -M27 + -M29 + -M32
	return (C, 38)