# Matrix multiplication: C = A @ B
# A: 3×3, B: 3×3, C: 3×3
# Using 23 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(3)] for _ in range(3)])
	M0 = A[2][1] * (B[0][1] + -B[1][0] + B[1][1])
	M1 = (A[0][0] + -A[2][0] + A[2][1]) * (B[0][1] + -2*B[1][0] + B[1][1] + B[1][2])
	M2 = (A[1][1] + -A[1][2] + -A[2][1]) * (B[1][0] + B[2][1])
	M3 = A[0][1] * (B[1][0] + -B[1][2])
	M4 = (A[0][1] + A[1][1] + -A[1][2]) * (B[1][0] + B[2][2])
	M5 = (A[1][1] + -A[1][2] + -A[2][1] + A[2][2]) * B[2][1]
	M6 = A[2][2] * (B[0][0] + -B[2][0] + B[2][1])
	M7 = (A[0][0] + -A[2][0] + -A[2][2]) * (B[0][0] + -B[2][0] + B[2][2])
	M8 = (A[0][1] + -A[0][2] + A[1][1] + -A[1][2]) * B[2][2]
	M9 = (A[2][0] + -A[2][1]) * B[0][1]
	M10 = (A[2][0] + A[2][2]) * B[0][0]
	M11 = (A[0][0] + -A[0][1] + -A[2][0] + A[2][1]) * (2*B[1][0] + -B[1][1] + -B[1][2])
	M12 = (A[0][0] + A[0][2] + -A[2][0] + -A[2][2]) * (B[2][0] + -B[2][2])
	M13 = A[0][0] * B[0][2]
	M14 = (A[0][1] + A[1][1]) * (B[0][2] + B[1][2] + B[2][2])
	M15 = (A[1][1] + -A[1][2]) * B[1][0]
	M16 = (A[1][0] + A[1][1] + -A[2][0] + -A[2][1]) * B[0][1]
	M17 = (A[1][0] + 2*A[2][0] + 2*A[2][2]) * (B[0][0] + -B[1][0] + -B[2][0])
	M18 = (A[1][1] + -A[2][1]) * (B[0][1] + -B[1][1] + -B[2][1])
	M19 = (A[0][0] + -A[2][0]) * (B[0][0] + -B[0][1] + -B[0][2] + 2*B[1][0] + -B[1][1] + -B[1][2] + -B[2][0] + B[2][2])
	M20 = (A[0][1] + -A[1][0] + A[1][1]) * B[0][2]
	M21 = A[0][2] * (B[2][1] + -B[2][2])
	M22 = (A[1][0] + A[1][2] + 2*A[2][0] + 2*A[2][2]) * (B[1][0] + B[2][0])

# Assemble result matrix
	C[0][0] = M4 + M7 + -M8 + M10 + M12 + -M15
	C[1][0] = -2*M10 + M15 + M17 + M22
	C[2][0] = -M2 + M5 + -M6 + M10 + M15
	C[0][1] = M1 + M3 + M4 + -M8 + M9 + M11 + -M15 + M21
	C[1][1] = M0 + -M2 + M9 + M15 + M16 + -M18
	C[2][1] = M0 + -M2 + M5 + M9 + M15
	C[0][2] = -M3 + M4 + -M8 + M13 + -M15
	C[1][2] = M3 + -M4 + M14 + M15 + -M20
	C[2][2] = -M0 + M1 + -M2 + M5 + -M6 + -M7 + M13 + M15 + M19
	return (C, 23)