# Matrix multiplication: C = A @ B
# A: 2×3, B: 3×3, C: 2×3
# Using 15 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(3)])
	M0 = A[1][2] * (B[0][0] + B[2][0] + B[2][1])
	M1 = (A[0][0] + -A[1][2]) * (B[0][0] + B[2][2])
	M2 = A[0][0] * (B[0][1] + -B[0][2] + -B[2][2])
	M3 = (A[0][0] + -A[0][2]) * B[2][2]
	M4 = (A[0][2] + -A[1][2]) * (B[1][0] + B[2][0] + -B[2][2])
	M5 = A[0][1] * (B[1][1] + -B[1][2] + B[2][1])
	M6 = (A[0][1] + -A[0][2] + A[1][2]) * (B[1][0] + -B[2][1])
	M7 = (A[0][0] + -A[1][0] + A[1][1]) * (B[0][1] + B[1][2])
	M8 = (A[1][0] + -A[1][1]) * B[0][1]
	M9 = (A[0][1] + -A[0][2] + -A[1][1] + A[1][2]) * B[1][0]
	M10 = (A[0][1] + -A[0][2]) * B[2][1]
	M11 = A[1][1] * (B[0][1] + B[1][0] + B[1][1])
	M12 = (A[0][0] + -A[0][1] + -A[1][0] + A[1][1]) * B[1][2]
	M13 = (A[1][0] + -A[1][2]) * B[0][0]
	M14 = (A[0][0] + -A[1][0]) * (B[0][0] + -B[0][2] + -B[1][2])

# Assemble result matrix
	C[0][0] = M0 + M1 + -M3 + M4 + M6 + M10
	C[1][0] = M0 + M6 + -M9 + M10 + M13
	C[2][0] = M5 + M7 + M8 + -M10 + -M12
	C[0][1] = -M6 + M8 + M9 + -M10 + M11
	C[1][1] = -M2 + -M3 + M7 + M8 + -M12
	C[2][1] = -M1 + -M2 + M7 + M8 + M13 + M14
	return (C, 15)