# Matrix multiplication: C = A @ B
# A: 2×4, B: 4×5, C: 2×5
# Using 33 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(5)])
	M0 = -A[1][0] * (-B[0][0] + -B[2][0])
	M1 = (A[0][2] + -A[1][0] + A[1][2]) * (B[0][0] + -B[0][4] + B[2][0])
	M2 = (-A[0][0] + A[0][2] + -A[1][0] + A[1][2]) * (B[0][0] + -B[0][4] + -B[3][0])
	M3 = -A[0][0] * -B[0][4]
	M4 = (-A[1][0] + A[1][2]) * (-B[0][2] + B[2][0])
	M5 = (-A[0][0] + A[0][2] + -A[0][3] + -A[1][0] + A[1][2]) * (-B[0][2] + -B[3][0])
	M6 = (-A[0][0] + A[0][2] + -A[0][3] + -A[1][0] + A[1][2] + -A[1][3]) * (B[1][0] + B[3][0])
	M7 = (-A[0][0] + A[0][2] + -A[0][3]) * (-B[0][2] + B[3][3])
	M8 = (-A[0][0] + A[0][2] + -A[0][3] + -A[1][0] + A[1][1] + A[1][2] + -A[1][3]) * (B[1][0] + -B[3][3])
	M9 = (-A[1][0] + A[1][1] + A[1][2] + -A[1][3]) * B[3][3]
	M10 = (-A[0][0] + A[0][1] + A[0][2] + -A[0][3] + -A[1][0] + A[1][1] + A[1][2] + -A[1][3]) * B[1][0]
	M11 = A[1][1] * (B[1][1] + B[2][1])
	M12 = (-A[0][2] + A[1][1] + -A[1][2]) * (B[1][1] + -B[1][4] + B[2][1])
	M13 = (-A[0][1] + A[0][2] + -A[1][1] + A[1][2]) * (-B[0][1] + B[1][1] + -B[1][4] + B[3][1])
	M14 = (A[1][1] + -A[1][2]) * (B[1][0] + B[1][2] + -B[2][1] + -B[2][3] + -B[3][3])
	M15 = (-A[0][1] + A[0][2] + A[0][3] + -A[1][1] + A[1][2]) * (B[1][0] + B[1][2] + -B[3][1])
	M16 = (-A[0][0] + -A[0][1] + A[0][2] + -A[1][1] + A[1][2]) * (-B[0][1] + B[2][3] + B[3][3])
	M17 = (-A[0][0] + -A[0][1] + A[0][2]) * (B[2][3] + B[3][3])
	M18 = (-A[0][1] + A[0][2] + A[0][3]) * (B[1][0] + B[1][2])
	M19 = (-A[0][1] + A[0][2] + A[0][3] + -A[1][1] + A[1][2] + A[1][3]) * B[3][1]
	M20 = (-A[0][2] + -A[1][2]) * (B[0][0] + -B[0][4] + B[1][1] + -B[1][4] + B[2][0] + B[2][1] + -B[2][4] + -B[3][4])
	M21 = -A[0][2] * (-B[0][2] + -B[1][0] + -B[1][2] + -B[2][2] + B[2][4])
	M22 = (-A[0][2] + -A[1][2] + A[1][3]) * (-B[0][2] + -B[1][0] + -B[1][2] + -B[2][2] + -B[3][4])
	M23 = A[1][3] * (-B[0][2] + -B[1][0] + -B[1][2] + -B[2][2] + -B[3][0] + -B[3][1] + -B[3][2])
	M24 = -A[0][0] * (-B[0][3] + -B[2][3])
	M25 = (A[1][2] + -A[1][3]) * (-B[0][2] + -B[1][0] + -B[1][2] + -B[2][2])
	M26 = (-A[0][0] + -A[0][1] + A[0][2] + -A[1][0] + -A[1][1] + A[1][2]) * -B[0][1]
	M27 = -A[0][1] * (B[1][0] + B[1][3] + B[2][3] + B[3][3])
	M28 = (-A[1][0] + -A[1][1]) * (-B[0][1] + -B[0][3] + B[3][3])
	M29 = -A[0][3] * (-B[0][2] + B[1][0] + B[1][2] + B[3][2] + -B[3][4])
	M30 = (-A[0][2] + A[0][3] + -A[1][2] + A[1][3]) * -B[3][4]
	M31 = A[1][1] * (-B[0][1] + -B[0][3] + B[1][3] + B[2][3] + 3*B[3][3])
	M32 = -A[0][1] * B[1][4]

# Assemble result matrix
	C[0][0] = M1 + -M2 + M3 + -M4 + M5 + -M7 + -M8 + -M9 + M10
	C[1][0] = M0 + M4 + -M5 + -M6 + M7 + M8 + M9
	C[2][0] = -M12 + -M13 + -M14 + -M15 + M16 + -M17 + M18 + -M32
	C[3][0] = M11 + M14 + M15 + -M16 + M17 + -M18 + M19 + M26
	C[4][0] = M7 + M8 + M9 + -M10 + -M18 + M22 + M25 + -M29 + -M30
	C[0][1] = M5 + M6 + -M7 + -M8 + -M9 + -M15 + M18 + -M19 + -M23 + -M25
	C[1][1] = M8 + M9 + -M10 + M17 + M24 + -M27
	C[2][1] = -M9 + M16 + -M17 + -M26 + M28 + M31
	C[3][1] = M3 + -M21 + M22 + M25 + -M30 + -M32
	C[4][1] = M0 + M1 + M11 + -M12 + M20 + M21 + -M22 + -M25
	return (C, 33)