# Matrix multiplication: C = A @ B
# A: 4×4, B: 4×4, C: 4×4
# Using 49 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(4)] for _ in range(4)])
	M0 = (A[0][0] + A[2][0]) * (B[0][0] + B[2][0])
	M1 = (A[0][0] + -A[0][2] + A[2][0]) * (B[0][0] + -B[0][2] + B[2][0])
	M2 = -A[0][2] * (B[0][0] + -B[0][2] + B[2][0] + -B[2][2])
	M3 = -A[2][2] * -B[2][2]
	M4 = -A[2][0] * -B[0][2]
	M5 = (A[0][0] + -A[0][2] + A[2][0] + -A[2][2]) * -B[2][0]
	M6 = (-A[1][0] + A[1][1] + -A[1][2] + -A[1][3]) * (-B[1][0] + B[1][1] + -B[1][2] + -B[1][3])
	M7 = (-A[1][0] + A[1][1] + -A[1][2] + -A[1][3] + -A[3][0] + A[3][1]) * (-B[1][0] + B[1][1] + -B[1][2] + -B[1][3] + -B[3][0] + B[3][1])
	M8 = (A[0][0] + -A[0][2]) * (B[0][0] + -B[0][2])
	M9 = (-A[1][0] + A[1][1] + -A[3][0] + A[3][1]) * (-B[1][0] + B[1][1] + -B[3][0] + B[3][1])
	M10 = (A[3][0] + -A[3][1]) * (-B[1][2] + -B[1][3])
	M11 = (-A[1][0] + A[1][1] + -A[1][2] + -A[1][3] + -A[3][0] + A[3][1] + -A[3][2] + -A[3][3]) * (B[3][0] + -B[3][1])
	M12 = (-A[1][2] + -A[1][3]) * (-B[1][0] + B[1][1] + -B[1][2] + -B[1][3] + -B[3][0] + B[3][1] + -B[3][2] + -B[3][3])
	M13 = (A[0][0] + -A[0][1] + A[1][0] + -A[1][1]) * (-B[0][1] + -B[0][3])
	M14 = (-A[0][1] + -A[0][3]) * -B[1][0]
	M15 = (A[0][1] + A[0][3] + -A[1][0] + A[1][1] + A[1][2] + A[1][3]) * (B[0][1] + B[0][3] + -B[1][0] + B[1][1] + B[1][2] + B[1][3])
	M16 = (A[0][1] + A[0][3] + -A[1][0] + A[1][1] + A[1][2] + A[1][3] + A[2][1] + A[3][0] + -A[3][1]) * (B[0][1] + B[0][3] + -B[1][0] + B[1][1] + B[1][2] + B[1][3] + B[2][1] + B[3][0] + -B[3][1])
	M17 = (A[0][1] + -A[1][0] + A[1][1] + A[2][1] + A[3][0] + -A[3][1]) * (B[0][1] + -B[1][0] + B[1][1] + B[2][1] + B[3][0] + -B[3][1])
	M18 = (A[0][3] + A[1][2] + A[1][3]) * (B[0][1] + B[0][3] + -B[1][0] + B[1][1] + B[1][2] + B[1][3] + B[2][1] + B[2][3] + B[3][0] + -B[3][1] + -B[3][2] + -B[3][3])
	M19 = (A[0][1] + A[0][3] + -A[1][0] + A[1][1] + A[1][2] + A[1][3] + A[2][1] + A[2][3] + A[3][0] + -A[3][1] + -A[3][2] + -A[3][3]) * (B[2][1] + B[3][0] + -B[3][1])
	M20 = (A[2][1] + A[3][0] + -A[3][1]) * (B[0][3] + B[1][2] + B[1][3])
	M21 = (A[0][1] + A[0][3] + A[1][1] + A[1][3]) * (B[0][1] + B[0][3] + B[1][1] + B[1][3])
	M22 = (A[0][1] + A[0][3] + A[1][1] + A[1][3] + A[2][1] + -A[3][1]) * (B[0][1] + B[0][3] + B[1][1] + B[1][3] + B[2][1] + -B[3][1])
	M23 = (A[0][3] + A[1][3]) * (B[0][1] + B[0][3] + B[1][1] + B[1][3] + B[2][1] + B[2][3] + -B[3][1] + -B[3][3])
	M24 = (A[0][1] + A[0][3] + A[1][1] + A[1][3] + A[2][1] + A[2][3] + -A[3][1] + -A[3][3]) * (B[2][1] + -B[3][1])
	M25 = (A[2][1] + -A[3][1]) * (B[0][3] + B[1][3])
	M26 = (A[2][3] + -A[3][3]) * (B[2][3] + -B[3][3])
	M27 = (A[2][3] + -A[3][2] + -A[3][3]) * (B[2][3] + -B[3][2] + -B[3][3])
	M28 = (A[0][3] + A[2][3]) * -B[3][2]
	M29 = (A[0][2] + A[0][3] + A[1][2] + A[1][3] + A[2][2] + A[2][3] + -A[3][2] + -A[3][3]) * (B[0][3] + B[2][3])
	M30 = (A[0][0] + -A[0][1] + -A[0][2] + -A[0][3] + A[1][0] + -A[1][1] + -A[1][2] + -A[1][3] + A[2][0] + -A[2][1] + -A[2][2] + -A[2][3] + -A[3][0] + A[3][1] + A[3][2] + A[3][3]) * B[0][3]
	M31 = -A[3][2] * (B[0][2] + B[0][3] + B[1][2] + B[1][3] + B[2][2] + B[2][3] + -B[3][2] + -B[3][3])
	M32 = A[0][3] * (-B[1][0] + B[3][0])
	M33 = (A[0][3] + -A[2][1]) * (-B[1][0] + B[3][0] + -B[3][2])
	M34 = (A[0][2] + A[0][3] + A[1][2] + A[1][3] + -A[2][0] + A[2][1] + A[2][2] + A[2][3] + A[3][0] + -A[3][1] + -A[3][2] + -A[3][3]) * (B[0][3] + -B[2][1])
	M35 = (-A[2][0] + A[2][1] + A[2][2] + A[2][3] + A[3][0] + -A[3][1] + -A[3][2] + -A[3][3]) * B[2][1]
	M36 = (-A[0][1] + -A[2][1]) * -B[1][2]
	M37 = (A[2][1] + A[2][3]) * (B[3][0] + -B[3][2])
	M38 = (-A[0][2] + -A[0][3] + -A[1][2] + -A[1][3]) * (B[2][1] + B[2][3])
	M39 = A[2][1] * (-B[1][0] + B[1][2] + B[3][0] + -B[3][2])
	M40 = -A[1][0] * (B[0][0] + -B[0][1] + B[1][0] + -B[1][1])
	M41 = (-A[1][0] + A[3][0]) * (B[0][0] + -B[0][1] + -B[0][2] + -B[0][3] + B[1][0] + -B[1][1] + -B[1][2] + -B[1][3] + B[2][0] + -B[2][1] + -B[2][2] + -B[2][3] + -B[3][0] + B[3][1] + B[3][2] + B[3][3])
	M42 = (-A[1][0] + A[3][0] + -A[3][2]) * (B[0][2] + B[0][3] + B[1][2] + B[1][3] + -B[2][0] + B[2][1] + B[2][2] + B[2][3] + B[3][0] + -B[3][1] + -B[3][2] + -B[3][3])
	M43 = (A[0][1] + A[1][1] + A[2][1] + -A[3][1]) * (B[0][1] + B[1][1] + B[2][1] + -B[3][1])
	M44 = (-A[1][0] + A[1][2] + A[3][0] + -A[3][2]) * (-B[2][0] + B[2][1] + B[2][2] + B[2][3] + B[3][0] + -B[3][1] + -B[3][2] + -B[3][3])
	M45 = (-A[2][0] + A[2][1] + A[3][0] + -A[3][1]) * (-B[0][1] + -B[2][1])
	M46 = (A[3][0] + -A[3][2]) * (-B[0][2] + -B[0][3] + -B[1][2] + -B[1][3])
	M47 = (-A[3][2] + -A[3][3]) * (-B[3][2] + -B[3][3])
	M48 = -A[1][2] * (-B[2][0] + B[2][1] + B[3][0] + -B[3][1])

# Assemble result matrix
	C[0][0] = M0 + -M1 + -M4 + M8 + M14 + M32
	C[1][0] = -M14 + -M15 + M16 + -M17 + -M20 + M21 + -M22 + M25 + -M32 + -M40 + M43 + M48
	C[2][0] = M1 + M4 + M5 + -M8 + -M28 + -M32 + M33 + M37
	C[3][0] = -M15 + M16 + -M19 + -M20 + M21 + -M22 + M24 + M25 + -M28 + -M31 + -M32 + M33 + M37 + -M40 + M41 + M42
	C[0][1] = -M6 + M7 + -M9 + M10 + -M13 + M14 + M15 + -M16 + M17 + M20 + -M30 + M32 + -M34 + -M35
	C[1][1] = M6 + -M7 + M9 + -M10 + -M14 + -M15 + M16 + -M17 + -M20 + M21 + -M22 + M25 + -M32 + M43
	C[2][1] = -M6 + M7 + M10 + M11 + -M15 + M16 + -M19 + -M20 + -M28 + -M32 + M33 + M35 + M37 + M45
	C[3][1] = -M6 + M7 + M10 + M11 + -M15 + M16 + -M19 + -M20 + M21 + -M22 + M24 + M25 + -M28 + -M32 + M33 + M37
	C[0][2] = M0 + -M1 + M2 + -M4 + M32 + -M33 + M36 + -M39
	C[1][2] = M16 + -M17 + -M18 + -M20 + -M22 + M23 + M25 + -M32 + M33 + -M36 + M39 + -M42 + M43 + M44 + -M46 + M48
	C[2][2] = M3 + M4 + -M28 + -M32 + M33 + M39
	C[3][2] = -M20 + M25 + -M26 + M27 + -M28 + -M31 + -M32 + M33 + M39 + -M46
	C[0][3] = M7 + -M9 + M10 + -M12 + M16 + -M17 + -M18 + -M20 + M30 + -M32 + M33 + M34 + M35 + -M36 + -M38 + M39
	C[1][3] = -M7 + M9 + -M10 + M12 + -M16 + M17 + M18 + M20 + M22 + -M23 + -M25 + M32 + -M33 + M36 + -M39 + -M43
	C[2][3] = M10 + M20 + -M27 + M28 + M29 + M32 + -M33 + -M34 + -M35 + M38 + -M39 + M47
	C[3][3] = M10 + M20 + -M25 + M26 + -M27 + M28 + M32 + -M33 + -M39 + M47
	return (C, 49)