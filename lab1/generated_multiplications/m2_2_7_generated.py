# Matrix multiplication: C = A @ B
# A: 2×2, B: 2×7, C: 2×7
# Using 25 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(7)])
	M0 = A[0][0] * (B[0][0] + B[1][0])
	M1 = (A[0][0] + -A[0][1]) * B[1][0]
	M2 = (A[0][0] + -A[1][1]) * (B[0][3] + -B[1][0])
	M3 = (A[1][0] + -A[1][1]) * B[0][3]
	M4 = (A[0][1] + -A[1][1]) * (B[1][0] + B[1][3])
	M5 = A[1][1] * (B[0][2] + -B[1][2])
	M6 = (A[1][0] + A[1][1]) * B[0][2]
	M7 = (A[0][0] + A[1][1]) * (B[0][2] + -B[1][6])
	M8 = (A[0][0] + -A[1][0]) * (B[0][2] + -B[0][6])
	M9 = A[0][0] * (B[0][6] + -B[1][6])
	M10 = A[1][1] * (B[0][5] + -B[1][5])
	M11 = (A[0][0] + A[1][1]) * (B[0][5] + -B[1][4])
	M12 = (A[1][0] + A[1][1]) * B[0][5]
	M13 = A[0][0] * (B[0][4] + -B[1][4])
	M14 = (A[0][0] + A[0][1]) * B[1][4]
	M15 = (A[0][0] + -A[0][1]) * B[1][1]
	M16 = (A[0][1] + -A[1][1]) * (B[1][2] + -B[1][6])
	M17 = (A[1][0] + -A[1][1]) * (B[0][5] + B[1][1])
	M18 = (A[0][0] + -A[1][0]) * (B[0][4] + -B[0][5])
	M19 = A[1][1] * (B[0][3] + B[1][3])
	M20 = (A[0][1] + -A[1][1]) * (2*B[1][2] + -B[1][4] + B[1][5] + -2*B[1][6])
	M21 = (A[0][0] + A[0][1]) * B[1][6]
	M22 = A[0][0] * (B[0][0] + -B[0][1] + -2*B[0][6] + B[1][0] + -B[1][1] + 2*B[1][6])
	M23 = A[1][0] * (B[0][1] + 2*B[0][5] + B[1][1])
	M24 = (A[0][0] + -A[1][0]) * (B[0][0] + B[0][3] + -2*B[0][4] + 2*B[0][5])

# Assemble result matrix
	C[0][0] = M0 + -M1
	C[1][0] = M0 + M2 + -M3 + -2*M18 + -M24
	C[2][0] = M0 + -2*M9 + -M15 + -M22
	C[3][0] = -M12 + -M17 + M23
	C[4][0] = -M5 + M7 + M16 + M21
	C[5][0] = -M5 + M6
	C[6][0] = M1 + M2 + M4 + M19
	C[0][1] = M3 + M19
	C[1][1] = M13 + M14
	C[2][1] = -M11 + M12 + M13 + -M18
	C[3][1] = -M10 + M11 + M14 + -2*M16 + M20
	C[4][1] = -M10 + M12
	C[5][1] = M9 + M21
	C[6][1] = M6 + -M7 + M8 + M9
	return (C, 25)