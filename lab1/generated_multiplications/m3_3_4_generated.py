# Matrix multiplication: C = A @ B
# A: 3×3, B: 3×4, C: 3×4
# Using 29 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(3)] for _ in range(4)])
	M0 = A[1][2] * (B[0][0] + -B[2][0] + -B[2][3])
	M1 = (A[1][0] + A[1][2]) * B[0][0]
	M2 = (A[1][2] + A[2][0]) * (B[0][0] + B[2][1])
	M3 = (A[0][0] + A[1][0] + A[1][2]) * (B[0][0] + -B[2][0] + -B[2][2] + -2*B[2][3])
	M4 = (A[0][0] + A[0][2] + A[1][0] + A[1][2]) * (B[2][0] + B[2][2] + 2*B[2][3])
	M5 = (A[1][2] + -A[2][2]) * (B[1][0] + -B[2][0] + -B[2][1])
	M6 = (A[2][0] + A[2][2]) * B[2][1]
	M7 = (A[1][2] + -A[2][1] + -A[2][2]) * (B[1][0] + B[2][3])
	M8 = A[2][0] * (B[0][1] + B[0][3] + -B[2][1])
	M9 = (A[1][1] + A[1][2] + -A[2][1] + -A[2][2]) * B[1][0]
	M10 = (A[0][2] + -A[2][0] + -A[2][2]) * (B[0][1] + B[0][2] + B[0][3] + -B[2][1])
	M11 = (A[0][0] + A[0][2] + -A[2][0] + -A[2][2]) * (B[0][1] + B[0][2] + B[0][3])
	M12 = (A[1][0] + -A[2][0]) * (B[0][0] + B[0][1] + B[1][1])
	M13 = (A[1][0] + -A[1][1] + -A[2][0]) * (B[0][3] + -B[1][1])
	M14 = (A[1][0] + -A[1][1]) * B[0][3]
	M15 = (A[0][2] + -A[2][2]) * (B[0][1] + B[0][2] + B[0][3] + B[1][2] + -B[2][1] + -B[2][2])
	M16 = (A[0][0] + A[1][0] + -A[1][1]) * (B[0][3] + B[1][2] + B[1][3])
	M17 = (A[0][2] + -A[2][1] + -A[2][2]) * (B[1][2] + B[2][3])
	M18 = A[2][1] * (B[1][1] + B[1][3] + -B[2][3])
	M19 = A[0][1] * (B[1][1] + B[1][2] + B[1][3])
	M20 = (A[0][1] + A[0][2] + -A[2][1] + -A[2][2]) * B[1][2]
	M21 = A[1][1] * (B[0][3] + B[1][0] + B[1][3])
	M22 = (A[2][1] + A[2][2]) * B[2][3]
	M23 = A[0][0] * B[0][2]
	M24 = (A[0][0] + A[1][0]) * (B[0][0] + B[0][2] + B[0][3] + B[1][2] + B[1][3] + -B[2][0] + -B[2][2] + -2*B[2][3])
	M25 = (A[0][0] + -A[0][1] + A[1][0] + -A[1][1]) * (B[1][2] + B[1][3])
	M26 = (A[1][0] + -A[1][1] + -A[2][0] + A[2][1]) * B[1][1]
	M27 = A[0][2] * (B[2][2] + B[2][3])
	M28 = A[0][1] * (B[1][0] + B[1][1] + B[1][3])

# Assemble result matrix
	C[0][0] = -M1 + M3 + M4 + -M17 + -M19 + M20 + -M22 + -M27 + M28
	C[1][0] = -M0 + M1 + -M7 + M9 + -M22
	C[2][0] = -M0 + M2 + M5 + -M6 + -M7 + -M22
	C[3][0] = M6 + -M10 + M11 + M14 + -M16 + M19 + -M23 + M25
	C[0][1] = -M1 + M2 + M8 + M12 + M13 + -M14
	C[1][1] = M6 + M8 + M13 + -M14 + M26
	C[2][1] = -M17 + M20 + -M22 + M23 + M27
	C[3][1] = M0 + -M3 + -M7 + M9 + -M16 + -M21 + -M22 + -M23 + M24
	C[0][2] = -M8 + -M10 + M15 + -M17 + -M22 + M27
	C[1][2] = -M14 + M16 + M17 + -M20 + M22 + -M25
	C[2][2] = M7 + -M9 + M14 + M21 + M22
	C[3][2] = -M13 + M14 + M18 + M22 + -M26
	return (C, 29)