# Matrix multiplication: C = A @ B
# A: 2×2, B: 2×4, C: 2×4
# Using 14 multiplications (Strassen-like algorithm)

from multiply import Matrix

def multiply(A, B):
	C = Matrix([[0 for _ in range(2)] for _ in range(4)])
	M0 = A[0][0] * (B[0][3] + B[1][3])
	M1 = (A[0][0] + -A[0][1]) * B[1][3]
	M2 = (A[0][0] + A[1][1]) * (B[0][0] + -B[1][3])
	M3 = A[1][1] * (B[0][0] + B[1][0] + -B[1][1])
	M4 = A[0][0] * (B[0][2] + B[1][2])
	M5 = (A[0][0] + -A[0][1]) * B[1][2]
	M6 = (A[0][0] + -A[0][1] + -A[1][1]) * (B[0][1] + B[0][2] + B[1][2])
	M7 = (A[0][1] + A[1][1]) * (B[0][1] + B[0][2] + B[1][1] + B[1][2])
	M8 = (A[0][0] + -A[0][1] + A[1][0] + -A[1][1]) * (B[0][1] + B[0][2])
	M9 = A[1][1] * B[1][1]
	M10 = (A[0][0] + A[1][0]) * (B[0][0] + B[0][3])
	M11 = (A[1][0] + -A[1][1]) * B[0][0]
	M12 = A[1][0] * B[0][1]
	M13 = (A[0][1] + A[1][1]) * (B[0][1] + B[0][2] + B[1][0] + B[1][1] + B[1][2] + B[1][3])

# Assemble result matrix
	C[0][0] = M1 + M2 + -M3 + -M7 + -M9 + M13
	C[1][0] = M3 + M9 + M11
	C[2][0] = -M4 + M6 + M7 + -M9
	C[3][0] = M9 + M12
	C[0][1] = M4 + -M5
	C[1][1] = M5 + -M6 + M8 + -M12
	C[2][1] = M0 + -M1
	C[3][1] = -M0 + -M2 + M10 + -M11
	return (C, 14)